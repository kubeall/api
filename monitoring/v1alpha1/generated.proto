/*
Copyright 2022 The kubeall.com Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kubeall.api.monitoring.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kubeall/api/monitoring/v1alpha1";

message MetricValue {
  optional int64 timestamp = 1;

  optional string value = 2;
}

// ProjectArchitecture is the Schema for the projectarchitectures API
message ProjectArchitecture {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ProjectArchitectureSpec spec = 2;

  optional ProjectArchitectureStatus status = 3;
}

// ProjectArchitectureList contains a list of ProjectArchitecture
message ProjectArchitectureList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ProjectArchitecture items = 2;
}

// ProjectArchitectureSpec defines the desired state of ProjectArchitecture
message ProjectArchitectureSpec {
  // Project Description
  // +optional
  optional string description = 1;

  // Project's services relation, key is service name
  // +optional
  map<string, ProjectService> services = 2;

  // project's metrics prometheus information
  // +optional
  map<string, PrometheusInfo> prometheusInformation = 3;

  // metrics scrape interval
  // +optional
  optional string scrapeInterval = 4;

  // metrics scrape length, default one hour
  // +kubebuilder:default:=3600
  optional int64 scrapeLength = 5;
}

// ProjectArchitectureStatus defines the observed state of ProjectArchitecture
message ProjectArchitectureStatus {
  // INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
  // Important: Run "make" to regenerate code after modifying this file
  optional string hash = 1;

  // prometheus health check
  map<string, string> prometheusStatus = 2;

  // scrape timestamp
  optional int64 timestamp = 3;

  // project service, key is service name
  map<string, ServiceMetricsStatus> service = 4;
}

// Project service
message ProjectService {
  // Service Name
  // +kubebuilder:validation:Required
  optional string name = 1;

  // Service type
  // +kubebuilder:validation:Required
  // +kubebuilder:validation:Enum=frontend;backend;database;middleware
  optional string category = 2;

  // frontend icon display
  // +optional
  optional string icon = 3;

  // annotations
  // +optional
  map<string, string> annotations = 4;

  // service description
  // +kubebuilder:validation:Optional
  // +optional
  optional string description = 5;

  // service item,map key is service version
  // +kubebuilder:validation:Required
  map<string, ProjectServiceItem> projectServiceItems = 6;
}

message ProjectServiceItem {
  // Service Name
  // +kubebuilder:validation:Required
  optional string name = 1;

  // service description
  // +kubebuilder:validation:Optional
  // +optional
  optional string description = 2;

  // DeployPath
  // if server deployed in same namespace with ProjectArchitecture instance, deployPath is kind eg: [Deployment]
  // if service deployed in cluster other namespace, name has prefix with ClusterNamespace., eg: ClusterNamespace.[default].[Deployment]
  // if server deployed in other cluster's namespace, name has External with ExternalClusterNamespace, eg: ExternalClusterNamespace.[clustercode].[default].[Deployment]
  // if server is deployed in other system, name has prefix External. ,eg: External
  // +kubebuilder:validation:Required
  optional string deployPath = 3;

  // annotations
  // +optional
  map<string, string> annotations = 4;

  // service relation
  // +kubebuilder:validation:Required
  repeated ServiceRelation serviceRelations = 5;

  // metrics
  // +optional
  repeated ServiceMetrics metrics = 6;
}

message PrometheusInfo {
  // prometheus
  // +kubebuilder:validation:Required
  optional string address = 5;

  // +kubebuilder:default:=/var/run/secrets/kubernetes.io/serviceaccount/token
  // prometheus token path or value, defult is pod sa token path
  optional string token = 6;

  // Selects a key of a ConfigMap.
  // +optional
  optional k8s.io.api.core.v1.ConfigMapKeySelector configMapKeyRef = 3;

  // Selects a key of a secret in the pod's namespace
  // +optional
  optional k8s.io.api.core.v1.SecretKeySelector secretKeyRef = 4;
}

message ServiceItemMetricsStatus {
  // metrics name
  // +kubebuilder:validation:Required
  optional string name = 1;

  // metrics description
  // +kubebuilder:validation:Required
  optional string description = 2;

  // metrics data
  repeated VectorDataLine vectorData = 3;

  repeated VectorMatrixLine vectorMatrix = 4;

  // prometheus response error
  optional string error = 5;

  // Query Type
  // +kubebuilder:validation:Enum=query;query_range
  // +kubebuilder:default:=query
  optional string queryType = 6;

  // Metrics Unit
  // +kubebuilder:validation:Required
  optional string unit = 7;

  // prometheus address
  optional string prometheus = 8;
}

// ServiceItemStatus one service version metrics
message ServiceItemStatus {
  // key is metrics name
  map<string, ServiceItemMetricsStatus> metrics = 1;
}

message ServiceMetrics {
  // metrics name
  // +kubebuilder:validation:Required
  optional string name = 1;

  // metrics description
  // +kubebuilder:validation:Required
  optional string description = 2;

  // Metrics PromQL
  // +kubebuilder:validation:Required
  optional string promQl = 3;

  // Query Type
  // +kubebuilder:validation:Enum=query;query_range
  // +kubebuilder:default:=query
  optional string queryType = 4;

  // Metrics Unit
  // +kubebuilder:validation:Required
  optional string unit = 5;

  // prometheus relation information
  // +kubebuilder:validation:Required
  optional string prometheusRef = 6;
}

// ServiceMetricsStatus defines project service diff versions
message ServiceMetricsStatus {
  // key is service version
  map<string, ServiceItemStatus> items = 1;
}

message ServiceRelation {
  // Project Service Name
  // +kubebuilder:validation:Required
  optional string targetRef = 1;

  // target service version
  // +kubebuilder:validation:Required
  optional string targetVersion = 2;

  // The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
  // Default is TCP.
  // +kubebuilder:validation:Enum=TCP;UDP;SCTP
  // +kubebuilder:default:=TCP
  // +optional
  optional string protocol = 3;

  // The port that will be exposed by this service.
  // +optional
  optional int32 port = 4;

  // +kubebuilder:validation:Optional
  // +optional
  optional string description = 5;

  // annotations
  // +optional
  map<string, string> annotations = 6;
}

message VectorDataLine {
  map<string, string> metric = 1;

  optional MetricValue value = 2;
}

message VectorMatrixLine {
  map<string, string> metric = 1;

  repeated MetricValue values = 2;
}

